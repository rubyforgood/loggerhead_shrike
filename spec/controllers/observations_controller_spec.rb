require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ObservationsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Observation. As you add validations to Observation, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      sighted_at:DateTime.new(2016, 5, 10, 10, 30, 0, '-5'),
      location: 'Near my moms house',
      latitude: 38.918167,
      longitude: -78.194445,
      num_bands: 1
    }
  }

  let(:invalid_attributes) {
    {
      sighted_at: DateTime.new(2016, 5, 10, 10, 30, 0, '-5'),
      location: 'Near my moms house',
      latitude: 38.918167,
      longitude: -78.194445,
      num_bands: 3
    }
  }

  let (:user_params) {
    {
      email:                 "account@example.com",
      name:                  "John Doe",
      password:              "password",
      password_confirmation: "password"
    }
  }

  let(:researcher) {
    User.create!(user_params.merge(role: "researcher"))
  }
  let(:scientist) {
    User.create!(user_params.merge(role: "scientist"))
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ObservationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before(:each) do
    @request.env["devise.mapping"] = Devise.mappings[:user]
  end

  describe "GET #index" do
    context "researcher account" do
      it "assigns all observations as @observations" do
        sign_in researcher
        Observation.create! valid_attributes
        get :index, params: {}, session: valid_session
        expect(assigns(:observations)).to eq(Observation.all)
      end
    end

    context "scientist account" do
      it "denies access" do
        sign_in scientist
        get :index
        expect(response).to redirect_to(root_url)
      end
    end
  end

  describe "GET #show" do
    context "researcher account" do
      it "assigns the requested observation as @observation" do
        sign_in researcher
        observation = Observation.create! valid_attributes
        get :show, params: {id: observation.to_param}, session: valid_session
        expect(assigns(:observation)).to eq(observation)
      end
    end
    context "scientist account" do
      it "denies access" do
        sign_in scientist
        observation = Observation.create! valid_attributes
        get :show, params: {id: observation.to_param}
        expect(response).to redirect_to(root_url)
      end
    end
  end

  describe "GET #new" do
    context "researcher account" do
      it "assigns a new observation as @observation" do
        sign_in researcher
        get :new
        expect(response).to render_template(:new)
        expect(assigns(:observation)).to be_a_new(Observation)
      end
    end
    context "scientist account" do
      it "allows access" do
        sign_in scientist
        get :new
        expect(assigns(:observation)).to be_a_new(Observation)
        expect(response).to render_template(:new)
      end
    end
    context "no account" do
      it "denies access" do
        get :new
        expect(response).not_to render_template(:new)
        expect(response).to redirect_to(root_url)

        # TODO: figure out why the observation is still set, even when
        # the user does not have permission. By my reasoning, this
        # assertion should FAIL!
        # This means tests are passing when they probably shouldn't!
        expect(assigns(:observation)).to be_a_new(Observation)
      end
    end
  end

  describe "GET #edit" do
    context "researcher account" do
      it "assigns the requested observation as @observation" do
        sign_in researcher
        observation = Observation.create! valid_attributes
        get :edit, params: {id: observation.to_param}, session: valid_session
        expect(assigns(:observation)).to eq(observation)
      end

      it "renders the template" do
        sign_in researcher
        observation = Observation.create! valid_attributes
        get :edit, params: {id: observation.to_param}, session: valid_session
        expect(response).to render_template(:edit)
      end
    end

    context "scientist account" do
      it "denies access" do
        observation = Observation.create! valid_attributes
        get :edit, params: {id: observation.to_param}, session: valid_session
        expect(response).not_to render_template(:edit)
      end
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Observation" do
        sign_in researcher
        expect {
          post :create, params: {observation: valid_attributes}, session: valid_session
        }.to change(Observation, :count).by(1)
      end

      it "assigns a newly created observation as @observation" do
        sign_in researcher
        post :create, params: {observation: valid_attributes}, session: valid_session
        expect(assigns(:observation)).to be_a(Observation)
        expect(assigns(:observation)).to be_persisted
      end

      it "redirects to the created observation" do
        sign_in researcher
        post :create, params: {observation: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Observation.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved observation as @observation" do
        post :create, params: {observation: invalid_attributes}, session: valid_session
        expect(assigns(:observation)).to be_a_new(Observation)
      end

      it "re-renders the 'new' template" do
        sign_in researcher
        post :create, params: {observation: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          sighted_at: DateTime.new(2016, 5, 10, 10, 30, 0, '-5'),
          location: 'Near my dads house',
          latitude: 38.918167,
          longitude: -78.194445,
          num_bands: 1
        }
      }

      let(:valid_attributes) {
        {
          sighted_at: DateTime.new(2016, 5, 10, 10, 30, 0, '-5'),
          location: 'Near my moms house',
          latitude: 38.918167,
          longitude: -78.194445,
          num_bands: 1
        }
      }

      let(:valid_session) { {} }

      it "updates the requested observation" do
        sign_in researcher
        observation = Observation.create! valid_attributes
        put :update, params: {id: observation.to_param, observation: new_attributes}, session: valid_session
        observation.reload
        expect(observation).to have_attributes(new_attributes)
      end

      it "assigns the requested observation as @observation" do
        observation = Observation.create! valid_attributes
        put :update, params: {id: observation.to_param, observation: valid_attributes}, session: valid_session
        expect(assigns(:observation)).to eq(observation)
      end

      it "redirects to the observation" do
        sign_in researcher
        observation = Observation.create! valid_attributes
        put :update, params: {id: observation.to_param, observation: valid_attributes}, session: valid_session
        expect(response).to redirect_to(observation)
      end
    end

    context "with invalid params" do
      it "assigns the observation as @observation" do
        observation = Observation.create! valid_attributes
        put :update, params: {id: observation.to_param, observation: invalid_attributes}, session: valid_session
        expect(assigns(:observation)).to eq(observation)
      end

      it "re-renders the 'edit' template" do
        sign_in researcher
        observation = Observation.create! valid_attributes
        put :update, params: {id: observation.to_param, observation: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested observation" do
      sign_in researcher
      observation = Observation.create! valid_attributes
      expect {
        delete :destroy, params: {id: observation.to_param}, session: valid_session
      }.to change(Observation, :count).by(-1)
    end

    it "redirects to the observations list" do
      sign_in researcher
      observation = Observation.create! valid_attributes
      delete :destroy, params: {id: observation.to_param}, session: valid_session
      expect(response).to redirect_to(observations_url)
    end
  end

end
