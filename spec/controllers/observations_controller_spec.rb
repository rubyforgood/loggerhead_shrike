require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ObservationsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Observation. As you add validations to Observation, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      sighted_at: DateTime.new(2016, 5, 10, 10, 30, 0, '-5'),
      location: 'Near my moms house',
      latitude: 38.918167,
      longitude: -78.194445,
      num_bands: 1
    }
  end

  let(:invalid_attributes) do
    {
      sighted_at: DateTime.new(2016, 5, 10, 10, 30, 0, '-5'),
      location: 'Near my moms house',
      latitude: 38.918167,
      longitude: -78.194445,
      num_bands: 3
    }
  end

  let(:admin_params) do
    {
      email:                 'admin@gmail.com',
      name:                  'Mr Admin',
      role:                  'admin',
      password:              'password',
      password_confirmation: 'password'
    }
  end

  let(:admin) do
    User.create!(admin_params)
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ObservationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all observations as @observations' do
      @request.env['devise.mapping'] = Devise.mappings[:user]
      sign_in admin
      Observation.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:observations)).to eq(Observation.all)
    end
  end

  describe 'GET #show' do
    it 'assigns the requested observation as @observation' do
      observation = Observation.create! valid_attributes
      get :show, params: { id: observation.to_param }, session: valid_session
      expect(assigns(:observation)).to eq(observation)
    end
  end

  describe 'GET #new' do
    it 'assigns a new observation as @observation' do
      get :new, params: {}, session: valid_session
      expect(assigns(:observation)).to be_a_new(Observation)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested observation as @observation' do
      observation = Observation.create! valid_attributes
      get :edit, params: { id: observation.to_param }, session: valid_session
      expect(assigns(:observation)).to eq(observation)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Observation' do
        expect do
          post :create, params: { observation: valid_attributes }, session: valid_session
        end.to change(Observation, :count).by(1)
      end

      it 'assigns a newly created observation as @observation' do
        post :create, params: { observation: valid_attributes }, session: valid_session
        expect(assigns(:observation)).to be_a(Observation)
        expect(assigns(:observation)).to be_persisted
      end

      it 'redirects to the created observation' do
        post :create, params: { observation: valid_attributes }, session: valid_session
        expect(response).to redirect_to(Observation.last)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved observation as @observation' do
        post :create, params: { observation: invalid_attributes }, session: valid_session
        expect(assigns(:observation)).to be_a_new(Observation)
      end

      it "re-renders the 'new' template" do
        post :create, params: { observation: invalid_attributes }, session: valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        {
          sighted_at: DateTime.new(2016, 5, 10, 10, 30, 0, '-5'),
          location: 'Near my dads house',
          latitude: 38.918167,
          longitude: -78.194445,
          num_bands: 1
        }
      end

      let(:valid_attributes) do
        {
          sighted_at: DateTime.new(2016, 5, 10, 10, 30, 0, '-5'),
          location: 'Near my moms house',
          latitude: 38.918167,
          longitude: -78.194445,
          num_bands: 1
        }
      end

      let(:valid_session) { {} }

      it 'updates the requested observation' do
        observation = Observation.create! valid_attributes
        put :update, params: { id: observation.to_param, observation: new_attributes }, session: valid_session
        observation.reload
        expect(observation.location).to eql('Near my dads house')
        expect(observation.sighted_at.utc.to_i).to eql(DateTime.new(2016, 5, 10, 10, 30, 0, '-5').to_i)
        expect(observation.latitude).to eql(38.918167)
        expect(observation.longitude).to eql(-78.194445)
        expect(observation.num_bands).to eql(1)
      end

      it 'assigns the requested observation as @observation' do
        observation = Observation.create! valid_attributes
        put :update, params: { id: observation.to_param, observation: valid_attributes }, session: valid_session
        expect(assigns(:observation)).to eq(observation)
      end

      it 'redirects to the observation' do
        observation = Observation.create! valid_attributes
        put :update, params: { id: observation.to_param, observation: valid_attributes }, session: valid_session
        expect(response).to redirect_to(observation)
      end
    end

    context 'with invalid params' do
      it 'assigns the observation as @observation' do
        observation = Observation.create! valid_attributes
        put :update, params: { id: observation.to_param, observation: invalid_attributes }, session: valid_session
        expect(assigns(:observation)).to eq(observation)
      end

      it "re-renders the 'edit' template" do
        observation = Observation.create! valid_attributes
        put :update, params: { id: observation.to_param, observation: invalid_attributes }, session: valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested observation' do
      observation = Observation.create! valid_attributes
      expect do
        delete :destroy, params: { id: observation.to_param }, session: valid_session
      end.to change(Observation, :count).by(-1)
    end

    it 'redirects to the observations list' do
      observation = Observation.create! valid_attributes
      delete :destroy, params: { id: observation.to_param }, session: valid_session
      expect(response).to redirect_to(observations_url)
    end
  end
end
